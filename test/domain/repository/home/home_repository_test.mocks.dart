// Mocks generated by Mockito 5.4.4 from annotations
// in flowery/test/domain/repository/home/home_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flowery/core/api/api_result.dart' as _i5;
import 'package:flowery/data/data_source/remote_data_source/home/home_remote_data_source.dart'
    as _i3;
import 'package:flowery/data/models/home/home_data_model.dart' as _i6;
import 'package:flowery/domain/entities/home/home_best_seller_product_entity.dart'
    as _i10;
import 'package:flowery/domain/entities/home/home_category_entity.dart' as _i9;
import 'package:flowery/domain/entities/home/home_data_entity.dart' as _i2;
import 'package:flowery/domain/entities/home/home_discovery_entity.dart' as _i8;
import 'package:flowery/domain/entities/home/home_occasion_entity.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeData_0 extends _i1.SmartFake implements _i2.HomeData {
  _FakeHomeData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteDataSource extends _i1.Mock
    implements _i3.HomeRemoteDataSource {
  MockHomeRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Result<_i6.HomeDataModel>> getHomeData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getHomeData,
          [],
        ),
        returnValue: _i4.Future<_i5.Result<_i6.HomeDataModel>>.value(
            _i7.dummyValue<_i5.Result<_i6.HomeDataModel>>(
          this,
          Invocation.method(
            #getHomeData,
            [],
          ),
        )),
      ) as _i4.Future<_i5.Result<_i6.HomeDataModel>>);
}

/// A class which mocks [HomeData].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeData extends _i1.Mock implements _i2.HomeData {
  MockHomeData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeData copyWith({
    List<_i8.HomeDiscovery>? discovery,
    List<_i9.HomeCategory>? categories,
    List<_i10.HomeBestSellerProduct>? bestSellerProducts,
    List<_i11.HomeOccasion>? occasions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #discovery: discovery,
            #categories: categories,
            #bestSellerProducts: bestSellerProducts,
            #occasions: occasions,
          },
        ),
        returnValue: _FakeHomeData_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #discovery: discovery,
              #categories: categories,
              #bestSellerProducts: bestSellerProducts,
              #occasions: occasions,
            },
          ),
        ),
      ) as _i2.HomeData);
}

/// A class which mocks [HomeDataModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeDataModel extends _i1.Mock implements _i6.HomeDataModel {
  MockHomeDataModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeData toEntity() => (super.noSuchMethod(
        Invocation.method(
          #toEntity,
          [],
        ),
        returnValue: _FakeHomeData_0(
          this,
          Invocation.method(
            #toEntity,
            [],
          ),
        ),
      ) as _i2.HomeData);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
